generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                 Int       @id @default(autoincrement())
  applicationName    String
  applicationUrl     String
  allowedCorsOrigins String[]
  updatedAt          DateTime
  createdAt          DateTime
  deletedAt          DateTime?
}

model User {
  id                                  Int                      @id @default(autoincrement())
  email                               String                   @unique
  name                                String?
  password                            String                   @default("")
  refresh                             String?
  artists                             Artist[]
  createdAt                           DateTime                 @default(now())
  updatedAt                           DateTime                 @default(now()) @updatedAt
  deletedAt                           DateTime?
  isAdmin                             Boolean                  @default(false)
  artistUserSubscriptions             ArtistUserSubscription[]
  country                             String?
  userTrackGroupPurchase              UserTrackGroupPurchase[]
  emailConfirmationToken              String?                  @default(uuid()) @db.Uuid
  emailConfirmationExpiration         DateTime?                @default(dbgenerated("NOW() + '10 min'::interval"))
  passwordResetConfirmationToken      String?
  passwordResetConfirmationExpiration DateTime?
  stripeAccountId                     String?
  receiveMailingList                  Boolean                  @default(false)
  wishlist                            UserTrackGroupWishlist[]
  plays                               TrackPlay[]
}

model Post {
  id                        Int                     @id @default(autoincrement())
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @default(now()) @updatedAt
  deletedAt                 DateTime?
  title                     String
  content                   String?
  publishedAt               DateTime                @default(now())
  viewCount                 Int                     @default(0)
  artist                    Artist?                 @relation(fields: [artistId], references: [id])
  artistId                  Int?
  isPublic                  Boolean                 @default(false)
  minimumSubscriptionTierId Int?
  minimumSubscriptionTier   ArtistSubscriptionTier? @relation(fields: [minimumSubscriptionTierId], references: [id])
  hasAnnounceEmailBeenSent  Boolean                 @default(false)
  postSubscriptionTiers     PostSubscriptionTier[]
}

model PostSubscriptionTier {
  postId                   Int
  post                     Post                    @relation(fields: [postId], references: [id])
  artistSubscriptionTierId Int
  artistSubscriptionTier   ArtistSubscriptionTier? @relation(fields: [artistSubscriptionTierId], references: [id])

  @@unique([postId, artistSubscriptionTierId])
}

model Artist {
  id                Int                      @id @default(autoincrement())
  name              String
  bio               String?
  user              User                     @relation(fields: [userId], references: [id])
  userId            Int
  posts             Post[]
  trackGroups       TrackGroup[]
  enabled           Boolean                  @default(true)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @default(now()) @updatedAt
  deletedAt         DateTime?
  subscriptionTiers ArtistSubscriptionTier[]
  banner            ArtistBanner?
  avatar            ArtistAvatar?
  urlSlug           String                   @unique
  properties        Json?
  trackArtists      TrackArtist[]
  links             String[]
  location          String?
}

model ArtistAvatar {
  id               String    @id @default(uuid()) @db.Uuid
  url              String[]
  artist           Artist    @relation(fields: [artistId], references: [id])
  artistId         Int       @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  originalFilename String?
}

model ArtistBanner {
  id               String    @id @default(uuid()) @db.Uuid
  url              String[]
  artist           Artist    @relation(fields: [artistId], references: [id])
  artistId         Int       @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  originalFilename String?
}

model ArtistSubscriptionTier {
  id                    Int                      @id @default(autoincrement())
  name                  String
  description           String                   @default("")
  artistId              Int
  artist                Artist                   @relation(fields: [artistId], references: [id])
  minAmount             Int? // in cents
  allowVariable         Boolean?
  maxAmount             Int? // in cents
  defaultAmount         Int? // in cents
  currency              String                   @default("USD")
  userSubscriptions     ArtistUserSubscription[]
  stripeProductKey      String?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @default(now()) @updatedAt
  deletedAt             DateTime?
  minimumTierForPost    Post[]
  postSubscriptionTiers PostSubscriptionTier[]
  isDefaultTier         Boolean                  @default(false)
  platformPercent       Int?                     @default(5)
}

model ArtistUserSubscription {
  id                       Int                    @id @default(autoincrement())
  artistSubscriptionTierId Int
  artistSubscriptionTier   ArtistSubscriptionTier @relation(fields: [artistSubscriptionTierId], references: [id])
  userId                   Int
  user                     User                   @relation(fields: [userId], references: [id])
  amount                   Int // In cents
  currency                 String                 @default("USD")
  stripeSubscriptionKey    String?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @default(now()) @updatedAt
  deletedAt                DateTime?

  @@unique([userId, artistSubscriptionTierId])
}

model UserTrackGroupPurchase {
  userId              Int
  user                User       @relation(fields: [userId], references: [id])
  trackGroupId        Int
  trackGroup          TrackGroup @relation(fields: [trackGroupId], references: [id])
  pricePaid           Int // in cents
  currencyPaid        String     @default("USD")
  datePurchased       DateTime   @default(now())
  stripeSessionKey    String?
  singleDownloadToken String?

  @@unique([userId, trackGroupId])
}

model UserTrackGroupWishlist {
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  trackGroupId Int
  trackGroup   TrackGroup @relation(fields: [trackGroupId], references: [id])
  createdAt    DateTime   @default(now())

  @@unique([userId, trackGroupId])
}

model TrackGroup {
  id                      Int                      @id @default(autoincrement())
  about                   String?
  artist                  Artist                   @relation(fields: [artistId], references: [id])
  artistId                Int
  title                   String?
  tracks                  Track[]
  cover                   TrackGroupCover?
  published               Boolean                  @default(false)
  type                    String?
  releaseDate             DateTime                 @default(now())
  adminEnabled            Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  deletedAt               DateTime?
  minPrice                Int? // in cents
  currency                String?                  @default("USD")
  isPriceFixed            Boolean                  @default(false)
  userTrackGroupPurchases UserTrackGroupPurchase[]
  stripeProductKey        String?
  urlSlug                 String
  credits                 String?
  userTrackGroupWishlist  UserTrackGroupWishlist[]
  platformPercent         Int?                     @default(5)

  @@unique([artistId, urlSlug])
}

model TrackGroupCover {
  id               String     @id @default(uuid()) @db.Uuid
  url              String[]
  trackGroup       TrackGroup @relation(fields: [trackGroupId], references: [id])
  trackGroupId     Int        @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?
  originalFilename String?
}

model Track {
  id           Int           @id @default(autoincrement())
  order        Int           @default(0)
  trackGroup   TrackGroup    @relation(fields: [trackGroupId], references: [id])
  trackGroupId Int
  title        String?
  audio        TrackAudio?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  isPreview    Boolean       @default(true)
  trackArtists TrackArtist[]
  metadata     Json?
  plays        TrackPlay[]
}

model TrackArtist {
  id         String  @id @default(uuid()) @db.Uuid
  trackId    Int
  track      Track   @relation(fields: [trackId], references: [id])
  artistName String?
  artistId   Int?
  artist     Artist? @relation(fields: [artistId], references: [id])
  role       String?
  isCoAuthor Boolean @default(false)
}

model TrackAudio {
  id               String       @id @default(uuid()) @db.Uuid
  url              String?
  track            Track?       @relation(fields: [trackId], references: [id])
  trackId          Int?         @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?
  originalFilename String?
  duration         Int? // In seconds
  hash             String?
  size             Int?
  fileExtension    String?
  uploadState      UploadState? @default(STARTED)
}

enum UploadState {
  SUCCESS
  ERROR
  STARTED
}

model TrackPlay {
  id        String   @id @default(uuid()) @db.Uuid
  trackId   Int
  track     Track    @relation(fields: [trackId], references: [id])
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  ip        String?
  createdAt DateTime @default(now())
  owned     Boolean  @default(false)
}
